mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using OmniUe4Function import *;
using OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_LampCeilingA(
	float U_Tiling = 1.0,
	float V_Tiling = 1.0,
	uniform texture_2d MainNormalInput = texture_2d("./Textures/T_Floor_01_N.png",::tex::gamma_linear)
	[[sampler_normal()]],
	uniform texture_2d AlbedoTexture = texture_2d("./Textures/T_Floor_01_D.png",::tex::gamma_srgb)
	[[sampler_color()]],
	float Desaturation = 0.0,
	float4 BaseColor_Tint = float4(1.0,1.0,1.0,1.0),
	uniform texture_2d MergeMapInput = texture_2d("./Textures/Alum_Anodized_roughness.png",::tex::gamma_linear)
	[[sampler_color()]],
	float RoughnessMin = 0.1,
	float RoughnessMax = 0.9)
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(0).x,1.0-state::texture_coordinate(0).y);

	float2 Local0 = (CustomizedUV0_mdl * float2(U_Tiling,V_Tiling));
	float4 Local1 = ::unpack_normal_map(tex::lookup_float4(MainNormalInput,float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat));

	float3 Normal_mdl = float3(Local1.x,Local1.y,Local1.z);

	float4 Local2 = tex::lookup_float4(AlbedoTexture,float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local3 = math::dot(float3(Local2.x,Local2.y,Local2.z), float3(0.3,0.59,0.11));
	float3 Local4 = math::lerp(float3(Local2.x,Local2.y,Local2.z),float3(Local3,Local3,Local3),Desaturation);
	float3 Local5 = (Local4 * float3(BaseColor_Tint.x,BaseColor_Tint.y,BaseColor_Tint.z));
	float4 Local6 = tex::lookup_float4(MergeMapInput,float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local7 = math::lerp(RoughnessMin,RoughnessMax,float3(Local6.x,Local6.y,Local6.z).y);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local5;
	float Metallic_mdl = float3(Local6.x,Local6.y,Local6.z).z;
	float Specular_mdl = 0.5;
	float Roughness_mdl = Local7;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
