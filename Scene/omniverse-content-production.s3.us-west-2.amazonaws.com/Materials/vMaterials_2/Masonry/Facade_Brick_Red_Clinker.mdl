/******************************************************************************
 *     Copyright 2023 NVIDIA Corporation. All rights reserved.
 ******************************************************************************
 
Permission is hereby granted by NVIDIA Corporation ("NVIDIA"), free of charge,
to any person obtaining a copy of the sample definition code that uses our 
Material Definition Language (the "MDL Materials"), to reproduce and distribute
the MDL Materials, including without limitation the rights to use, copy, merge,
publish, distribute, and sell modified and unmodified copies of the MDL 
Materials, and to permit persons to whom the MDL Materials is furnished to do
so, in all cases solely for use with NVIDIA's Material Definition Language,
subject to the following further conditions:

1. The above copyright notices, this list of conditions, and the disclaimer
that follows shall be retained in all copies of one or more of the MDL
Materials, including in any software with which the MDL Materials are bundled,
redistributed, and/or sold, and included either as stand-alone text files,
human-readable headers or in the appropriate machine-readable metadata fields
within text or binary files as long as those fields can be easily viewed by the
user, as applicable.
2. The name of NVIDIA shall not be used to promote, endorse or advertise any 
Modified Version without specific prior written permission, except a) to comply
 with the notice requirements otherwise contained herein; or b) to acknowledge
the contribution(s) of NVIDIA.

THE MDL MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT,
TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA CORPORATION BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, 
INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE
THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.
*/


mdl 1.4;

import ::anno::*;
import ::base::*;
import ::df::*;
import ::math::*;
import ::state::*;
import ::tex::*;
import ::nvidia::core_definitions::blend_colors;
import ::nvidia::core_definitions::dimension;


const string COPYRIGHT = 
" Copyright 2023 NVIDIA Corporation. All rights reserved.\n"
" MDL MATERIALS ARE PROVIDED PURSUANT TO AN END USER LICENSE  AGREEMENT,\n"
" WHICH WAS ACCEPTED IN ORDER TO GAIN ACCESS TO THIS FILE.  IN PARTICULAR,\n" 
" THE MDL MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
" EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\n"
" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF\n" 
" COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL NVIDIA\n"
" CORPORATION BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY\n"
" GENERAL, SPECIAL,  INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN\n"
" AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR\n"
" INABILITY TO USE THE MDL MATERIALS OR FROM OTHER DEALINGS IN THE MDL MATERIALS.\n";



float3 normalmap_normal(
	uniform texture_2d texture,
	float factor = 1.0,
	::base::texture_coordinate_info uvw = ::base::texture_coordinate_info()
)
{
	float3 lookup = (::tex::lookup_float3(texture, float2(uvw.position.x, uvw.position.y)) - 0.5) * (factor * 2.0);
	return ::math::normalize(uvw.tangent_u * lookup.x + uvw.tangent_v * lookup.y + ::state::normal());
}

::base::texture_coordinate_info vmat_transform(
								uniform float2 translation = float2(0.0, 0.0),
								uniform float rotation     = 0.0,
								uniform float2 scaling     = float2(1.0, 1.0),
								uniform ::base::texture_coordinate_system system = ::base::texture_coordinate_uvw,
								uniform int uv_space       = 0
)
{
	float rotation_rad = (rotation * 3.1415926535897932384626433832f) / 180.f;
	
	float4x4 scale =
	float4x4(1.0 /scaling.x, 0.             ,  0. ,     0.,
			 0.            , 1.0 /scaling.y ,  0. ,     0.,
			 0.            , 0.             ,  1.0,     0.,
			 translation.x , translation.y  ,  0.0,     1.);

    float s = ::math::sin(rotation_rad);
    float c = ::math::cos(rotation_rad);
    float4x4 rotate =
	float4x4(  c  ,  -s   , 0.0 , 0.0,
			   s  ,   c   , 0.0 , 0.0,
			   0.0,   0.0 , 1.0 , 0.0,
			   0. ,   0.0 , 0.0 , 1.);
	
	return ::base::transform_coordinate(scale*rotate, ::base::coordinate_source(system, uv_space));
}


float remap(float input, float low, float high)
{
	//return low + input * (high - low);
	return ::math::lerp(low, high, input);
}


float remap_xy_to_0_1(float input, float x, float y)
{
	return (input - x)/(y - x);
}

float histogram_scan_big(float input, float width, float position)
{
	return ::math::clamp(
				remap_xy_to_0_1(input,
					::math::lerp(-width, 1.0, position),
					::math::lerp(0.0, 1.0 + width, position)),
				0.0,
				1.0);
}

float histogram_range(float input, float range, float position)
{	
	float low = ::math::clamp(1.0 - ::math::min(((1.0 - position) + range * 0.5), (1.0 - position) * 2), 0.0, 1.0);
	float high = ::math::clamp(::math::min((position + range * 0.5 ), position * 2.0), 0.0, 1.0);
	return ::math::lerp(low, high, input);
}


float histogram_pos_range(float input, float range, float position)
{
	float range_half = range/2.0;
	float subtract_low = (position + range_half) > 1.0 ? (position + range/2.0) - 1.0 : 0.0;
	float low = position - range_half - subtract_low;
	
	float add_high = (position - range_half) < 0.0 ? ::math::abs(position - range_half) : 0.0;
	float high = position + range_half + add_high;
	return remap(input, low, high);
}


export material Facade_Brick_Red_Clinker(
    float grime_weight = 0.f [[
        ::anno::display_name("Grime Weight"),
		::anno::description("Applied slight grime and dirt on top of the material to give it a worn, aged appearance"),
		::anno::hard_range(0.f, 1.f),
        ::anno::in_group("Appearance")
    ]],
    float bricks_brightness = 0.276000023f [[
        ::anno::display_name("Bricks Brightness"),
		::anno::description("Adjusts the brightness of the bricks"),
		::anno::hard_range(0.f, 1.f),
        ::anno::in_group("Appearance", "Bricks")
    ]],
    float leaks_weight = 0.f [[
        ::anno::display_name("Leaks weight"),
		::anno::description("Adds small leaks to the material"),
		::anno::hard_range(0.f, 1.f),
        ::anno::in_group("Appearance", "Bricks")
    ]],
    color leak_color = color(0.0476929992f, 0.306998998f, 0.0575760007f) [[
        ::anno::display_name("Leaks Color"),
		::anno::description("Adjusts the color of the leaks"),
        ::anno::in_group("Appearance", "Bricks")
    ]],
    float paint_transition = 0.f [[
        ::anno::display_name("Paint Height"),
		::anno::description("Adds paint to the material, depending on the value of this parameter the paint is gradually applied"),
		::anno::hard_range(0.f, 1.f),
        ::anno::in_group("Appearance", "Paint")
    ]],
    color paint_color = color(0.522521973f, 0.327468991f, 0.0592540018f) [[
        ::anno::display_name("Paint Color"),
		::anno::description("Sets the color of the paint"),
        ::anno::in_group("Appearance", "Paint")
    ]],
    uniform float paint_stroke_amount = 0.6f [[
        ::anno::display_name("Paint Bump Strength"),
		::anno::description("Adjusts the bumpiness of the paint strokes"),
		::anno::hard_range(0.f, 1.f),
        ::anno::in_group("Appearance", "Paint")
    ]],
    float paint_roughness = 0.5f [[
        ::anno::display_name("Paint Reflectivity"),
		::anno::description("Adjusts the reflectivity of the paint applied on top of the bricks"),
		::anno::hard_range(0.f, 1.f),
        ::anno::in_group("Appearance", "Paint")
    ]],
    uniform float2 texture_translate = float2(0.f) [[
        ::anno::display_name("Translation"),
		::anno::description("Offsets position of the material"),
        ::anno::in_group("Transform")
    ]],
    uniform float texture_rotate = 0.f [[
        ::anno::display_name("Rotation"),
		::anno::description("Rotates the material"),
        ::anno::in_group("Transform")
    ]],
    uniform float2 texture_scale = float2(1.f) [[
        ::anno::display_name("Scale"),
		::anno::description("Scales the material"),
		::nvidia::core_definitions::dimension(float2(1.0f, 1.0f)),
        ::anno::in_group("Transform")
    ]],
    uniform int uv_space_index = 0 [[
        ::anno::display_name("UV Space Index"),
		::anno::description("Use selected UV space for material"),
        ::anno::in_group("Advanced")
    ]]
)
[[
	::anno::display_name("Brick Clinker"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "red", "warm")),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = 
    let {
        bool tmp0 = false;
        material_surface tmp1(
            ::df::custom_curve_layer(0.f, 1.f, 5.f, ::math::lerp(1.f, float3(::base::file_texture(texture_2d("./textures/clinker_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1], grime_weight), ::df::microfacet_ggx_smith_bsdf(::math::lerp(histogram_pos_range(::base::file_texture(texture_2d("./textures/painted_wall_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.275450021f, ::math::lerp(0.0799999982f, 0.920000017f, paint_roughness)), ::math::lerp(1.f, histogram_range(::base::file_texture(texture_2d("./textures/clinker_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.468000025f, 0.879000068f), float3(::base::file_texture(texture_2d("./textures/clinker_mask_multi_R_rnd_color_G_grout_B_leaks.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), histogram_scan_big(1.f - float3(::base::file_texture(texture_2d("./textures/clinker_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.117000006f, ::math::lerp(0.0900000036f, 0.68900001f, paint_transition))) * ::math::lerp(histogram_pos_range(::base::file_texture(texture_2d("./textures/painted_wall_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.275450021f, ::math::lerp(0.0799999982f, 0.920000017f, paint_roughness)), ::math::lerp(1.f, histogram_range(::base::file_texture(texture_2d("./textures/clinker_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.468000025f, 0.879000068f), float3(::base::file_texture(texture_2d("./textures/clinker_mask_multi_R_rnd_color_G_grout_B_leaks.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), histogram_scan_big(1.f - float3(::base::file_texture(texture_2d("./textures/clinker_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.117000006f, ::math::lerp(0.0900000036f, 0.68900001f, paint_transition))), ::math::lerp(histogram_pos_range(::base::file_texture(texture_2d("./textures/painted_wall_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.275450021f, ::math::lerp(0.0799999982f, 0.920000017f, paint_roughness)), ::math::lerp(1.f, histogram_range(::base::file_texture(texture_2d("./textures/clinker_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.468000025f, 0.879000068f), float3(::base::file_texture(texture_2d("./textures/clinker_mask_multi_R_rnd_color_G_grout_B_leaks.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), histogram_scan_big(1.f - float3(::base::file_texture(texture_2d("./textures/clinker_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.117000006f, ::math::lerp(0.0900000036f, 0.68900001f, paint_transition))) * ::math::lerp(histogram_pos_range(::base::file_texture(texture_2d("./textures/painted_wall_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.275450021f, ::math::lerp(0.0799999982f, 0.920000017f, paint_roughness)), ::math::lerp(1.f, histogram_range(::base::file_texture(texture_2d("./textures/clinker_rough.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).mono, 0.468000025f, 0.879000068f), float3(::base::file_texture(texture_2d("./textures/clinker_mask_multi_R_rnd_color_G_grout_B_leaks.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), histogram_scan_big(1.f - float3(::base::file_texture(texture_2d("./textures/clinker_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.117000006f, ::math::lerp(0.0900000036f, 0.68900001f, paint_transition))), color(1.f, 1.f, 1.f), ::state::texture_tangent_u(0), ::df::scatter_reflect, ""), ::df::diffuse_reflection_bsdf(::nvidia::core_definitions::blend_colors(::nvidia::core_definitions::blend_colors(paint_color, ::nvidia::core_definitions::blend_colors(::base::file_texture(texture_2d("./textures/clinker_diff.jpg", ::tex::gamma_srgb), color(0.f, 0.f, 0.f), color(::math::lerp(0.5f, 0.800000012f, bricks_brightness)), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint, ::nvidia::core_definitions::blend_colors(leak_color, color(1.f, 1.f, 1.f), ::base::color_layer_blend, ::math::pow(float3(::base::file_texture(texture_2d("./textures/clinker_mask_multi_R_rnd_color_G_grout_B_leaks.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 2.20000005f)).tint, ::base::color_layer_multiply, leaks_weight).tint, ::base::color_layer_blend, histogram_scan_big(1.f - float3(::base::file_texture(texture_2d("./textures/clinker_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.117000006f, ::math::lerp(0.0900000036f, 0.68900001f, paint_transition))).tint, color(float3(::base::file_texture(texture_2d("./textures/clinker_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[1]), ::base::color_layer_multiply, grime_weight).tint, 0.f, ""), ::state::normal()),
            material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        material_surface tmp2 = material_surface(scattering: bsdf(), emission: material_emission(emission: edf(), intensity: color(0.f, 0.f, 0.f), mode: intensity_radiant_exitance));
        color tmp3 = color(1.f, 1.f, 1.f);
        material_volume tmp4 = material_volume(scattering: vdf(), absorption_coefficient: color(0.f, 0.f, 0.f), scattering_coefficient: color(0.f, 0.f, 0.f));
        material_geometry tmp5(
            float3(0.f),
            1.f,
            ::math::normalize(::math::lerp(::base::file_bump_texture(texture_2d("./textures/clinker_paint_stroke_bump.jpg", ::tex::gamma_linear), ::math::lerp(1.f, 8.f, paint_stroke_amount), ::base::mono_average, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, ::state::normal(), false), normalmap_normal(texture_2d("./textures/clinker_norm.jpg", ::tex::gamma_linear), 1.29999995f, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index)), histogram_scan_big(1.f - float3(::base::file_texture(texture_2d("./textures/clinker_multi_R_rough_G_ao_B_height.jpg", ::tex::gamma_linear), color(0.f, 0.f, 0.f), color(1.f, 1.f, 1.f), ::base::mono_alpha, vmat_transform(texture_translate, texture_rotate, texture_scale, ::base::texture_coordinate_uvw, uv_space_index), float2(0.f, 1.f), float2(0.f, 1.f), ::tex::wrap_repeat, ::tex::wrap_repeat, false).tint)[2], 0.207000017f, ::math::lerp(0.259000003f, 0.462000012f, paint_transition)))));
    } in
        material(
            thin_walled: tmp0,
            surface: tmp1,
            backface: tmp2,
            ior: tmp3,
            volume: tmp4,
            geometry: tmp5);

export material Facade_Brick_Red_Clinker_Mossy_Leaking(*)
[[
	::anno::display_name("Brick Clinker - Mossy Leaks"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "red"  )),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Mossy_Leaking.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      1.0f,
	bricks_brightness: 0.5f,
	leaks_weight:      1.0f,
	leak_color:        color(0.044553f, 0.311180f, 0.054592f),
	paint_transition:  0.0f,
	paint_color:       color(0.0f),
	paint_stroke_amount: 0.418f,
	paint_roughness:   0.5f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);


export material Facade_Brick_Red_Clinker_Slightly_Painted(*)
[[
	::anno::display_name("Brick Clinker - Slightly Painted"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "red", "white"  )),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Slightly_Painted.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      0.05f,
	bricks_brightness: 0.3f,
	leaks_weight:      0.0f,
	leak_color:        color(0.0f),
	paint_transition:  0.45f,
	paint_color:       color(0.529523f),
	paint_stroke_amount: 0.418f,
	paint_roughness:   0.65f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);


export material Facade_Brick_Red_Clinker_Painted_White(*)
[[
	::anno::display_name("Brick Clinker - Painted White"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "red", "white"  )),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Painted_White.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      0.0f,
	bricks_brightness: 0.3f,
	leaks_weight:      0.0f,
	leak_color:        color(0.0f),
	paint_transition:  0.91f,
	paint_color:       color(0.529523f),
	paint_stroke_amount: 0.418f,
	paint_roughness:   0.52f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);


export material Facade_Brick_Red_Clinker_Sloppy_Paint_Job(*)
[[
	::anno::display_name("Brick Clinker - Sloppy Paint Job"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "white", "neutral" )),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Sloppy_Paint_Job.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      0.0f,
	bricks_brightness: 0.3f,
	leaks_weight:      0.0f,
	leak_color:        color(0.0f),
	paint_transition:  0.695f,
	paint_color:       color(0.529523f),
	paint_stroke_amount: 1.0f,
	paint_roughness:   0.65f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);


export material Facade_Brick_Red_Clinker_Dirty_Paint(*)
[[
	::anno::display_name("Brick Clinker - Dirty Paint"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "white", "dirty"  )),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Dirty_Paint.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      0.85f,
	bricks_brightness: 0.3f,
	leaks_weight:      0.0f,
	leak_color:        color(0.0f),
	paint_transition:  0.91,
	paint_color:       color(0.529523f),
	paint_stroke_amount: 0.418f,
	paint_roughness:   0.65f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);


export material Facade_Brick_Red_Clinker_Painted_Yellow(*)
[[
	::anno::display_name("Brick Clinker - Painted Yellow"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "yellow", "warm")),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Painted_Yellow.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      0.0f,
	bricks_brightness: 0.3f,
	leaks_weight:      0.0f,
	leak_color:        color(0.0f),
	paint_transition:  0.91,
	paint_color:       color(0.529523f, 0.373615f, 0.101145f),
	paint_stroke_amount: 0.418f,
	paint_roughness:   0.65f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);


export material Facade_Brick_Red_Clinker_Painted_Terracotta(*)
[[
	::anno::display_name("Brick Clinker - Painted Terracotta"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "terracotta", "warm")),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Painted_Terracotta.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      0.2f,
	bricks_brightness: 0.3f,
	leaks_weight:      0.0f,
	leak_color:        color(0.0f),
	paint_transition:  0.91,
	paint_color:       color(0.404541f, 0.116576f, 0.047776f),
	paint_stroke_amount: 0.45f,
	paint_roughness:   0.75f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);


export material Facade_Brick_Red_Clinker_Painted_Cool_Green(*)
[[
	::anno::display_name("Brick Clinker - Cool Green"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "green")),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Painted_Cool_Green.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      0.2f,
	bricks_brightness: 0.3f,
	leaks_weight:      0.0f,
	leak_color:        color(0.0f),
	paint_transition:  0.91,
	paint_color:       color(0.144972f, 0.280124f, 0.170138f),
	paint_stroke_amount: 0.418f,
	paint_roughness:   0.6f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);

export material Facade_Brick_Red_Clinker_Painted_Aqua_Blue(*)
[[
	::anno::display_name("Brick Clinker - Aqua Blue"),
	::anno::description("A red brick wall material made out of clinker. Features additional controls for adding leaks and a layer of paint on top of the material"),
	::anno::author("NVIDIA Corporation"),
	::anno::created(2020, 5, 6, ""),
	::anno::key_words(string[]("aec", "bricks", "brickwall", "clinker", "paint", "wall", "rough", "architecture", "multimaterial", "construction", "interior", "exterior", "leak", "blue", "aqua", "cool")),
	::anno::thumbnail("./.thumbs/Facade_Brick_Red_Clinker.Facade_Brick_Red_Clinker_Painted_Aqua_Blue.png"),
	::anno::copyright_notice(COPYRIGHT)
]]
 = Facade_Brick_Red_Clinker(
	grime_weight:      0.2f,
	bricks_brightness: 0.3f,
	leaks_weight:      0.0f,
	leak_color:        color(0.0f),
	paint_transition:  0.91,
	paint_color:       color(0.141980f, 0.394083f, 0.470440f),
	paint_stroke_amount: 0.418f,
	paint_roughness:   0.6f,
	texture_translate: float2(0.0f),
	texture_rotate:    0.0f,
	texture_scale:     float2(1.0f),
	uv_space_index:    0
);








